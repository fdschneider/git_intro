git version control 
========================================================
author: Florian D. Schneider 
date: 19.05.2016
font-import: http://fonts.googleapis.com/css?family=Open+Sans:400,700,400italic&subset=latin,greek-ext,greek
font-family: 'Open Sans'
transition: none


We are going to learn today:
========================================================
incremental: true

1. version control is useful, really!
2. **git** is a simple version control system  
3. use **Github** for collaboration on code 


Introduction
========================================================
type: section


why version control?
========================================================
incremental: true

- know what you did and when you did it! 
- documentation & development history 
- do robust, structured backups!

## reproducibility

why version control?
========================================================
incremental: true

- un-doing mistakes
- manage your non-linear development! 
- write re-usable code!

## progressive development

why version control?
========================================================
incremental: true

- collaborate on code (and text)
- enable structured code review 
- publish your code 

## openness


========================================================
incremental: true

## reproducibility
## progressive development
## openness
## = 
## Quality management!




But: hey! 
========================================================
type: section

You already use version control! 
========================================================

### *(kind of)*


You already use version control! 
========================================================
type: files

filename            | last updated               
------------------- | ----------
project.c           | 01.08.2014


You already use version control! 
========================================================
type: files

filename            | last updated               
------------------- | ----------
project.c           | 01.08.2014
project_v0.1.c      | 02.08.2014


You already use version control! 
========================================================
type: files

filename            | last updated               
------------------- | ----------
project.c           | 01.08.2014
project_v0.1.c      | 02.08.2014
project_v0.2.c      | 03.08.2014
project_v0.21.c     | 04.08.2014
project_v0.2_sonia.c| 04.08.2014

You already use version control!
========================================================
type: files

filename            | last updated               
------------------- | ----------
project.c           | 01.08.2014
project_v0.1.c      | 02.08.2014
project_v0.2.c      | 03.08.2014
project_v0.21.c     | 04.08.2014
project_v0.2_sonia.c| 04.08.2014
project_v0.21_s.c   | 05.08.2014

You already use version control!
========================================================
type: files

filename            | last updated               
------------------- | ----------
project.c           | 01.08.2014
project_v0.1.c      | 02.08.2014
project_v0.21.c     | 04.08.2014
project_v0.2_sonia.c| 04.08.2014
project_v0.21_s.c   | 05.08.2014
project_v0.2.c      | 07.08.2014

But:
========================================================

it's annoying!
========================================================
- There are so many files! 

it's confusing!
========================================================
- Which one was the latest version?
- OMG, I cannot show that to anyone!

it's not progressive or reproducible
========================================================
- Did I fix that bug in the right file now?  
- What version of that function is this?  
- Which version of the code was used to produce this result? 

it's not helping at all
========================================================
incremental:true

- I still need to do manual back-ups!  
- I still cannot reproduce what I did!
- Others cannot reproduce what I did!
- Collaboration is not straightforward!




git:  a version control "system"
========================================================
type: section

git
========================================================
incremental: true

- it's a version control "system" 
- robust against errors
- works for code
- works for databases
- works for writing, too!
- clean working directory

<!-- demo of folder -->

git
========================================================

filename            | last updated               
------------------- | ----------
.git                | 01.08.2014
project.c           | 01.08.2014

git
========================================================

filename            | last updated               
------------------- | ----------
.git                | 02.08.2014
project.c           | 02.08.2014

git
========================================================

filename            | last updated               
------------------- | ----------
.git                | 03.08.2014
project.c           | 03.08.2014


git
========================================================
incremental: true

- geeky command line 

```
$ git push origin master
```
- *or* user-friendly graphical software


========================================================

![](figures/github_for_windows.png)



git 
========================================================
graphical clients:

- Windows & Mac: [GitHub for Desktop](http://desktop.github.com/)
- Linux: [git-cola](http://git-cola.github.com/)
- also: [RStudio](http://www.rstudio.com) and other IDEs have plug-ins

and many more: [http://git-scm.com/downloads/guis](http://git-scm.com/downloads/guis)


GitHub for collaboration
========================================================
type: section


=======================================================

![](figures/github.png)


GitHub
========================================================

[https://github.com/](https://github.com/)

- hosting of *remote* repositories
- free for open source projects (fully public!)
- private repositories (free for researchers and students)
- collaborate (assign tasks, teams, access control)
- manage projects (milestones, wikis)
- share and publish (public stable URL, code releases)


GitHub
========================================================

ideal for collaboration 

- distributed git repositories, a.k.a. *clones* or *forks* 
- each repo is a *branch* of the parent repository
- *merge* branches easily

side effects:

- back-up your projects
- syncing your computers


========================================================

![](figures/remotes_Page_1.png)


========================================================
![](figures/remotes_Page_2.png)


========================================================
![](figures/remotes_Page_3.png)


========================================================
![](figures/remotes_Page_4.png)


========================================================
![](figures/remotes_Page_5.png)




Alternatives 
========================================================

GitLab at Bik-F: [http://172.30.45.28/](http://172.30.45.28/) (provided by Data and Modelling Centre, access only from local network/VPN)

![](figures/gitlab.png)

[Bitbucket](https://bitbucket.org/) (free private for small teams)  

[GitLab Cloud](https://about.gitlab.com/gitlab-com/) (unlimited free private)



Questions?
========================================================
type: section






A word on filetypes
=======================================================

### binary files 
 .docx, .ppt, .pdf, .jpg
- 'closed' filetypes
- git has to save edit as full file 
- **not ideal for git**

***

### raw text files
 .r, .cpp, .txt, .tex, .md, .csv
- 'open' filetypes
- only changed lines are recorded by git
- **perfect for git**


git started
========================================================
type: section



hands-on
========================================================

- get yourself a clone **(Exercise 1)**
  - fork a repository on Github
  - get a local copy of a repository on Github
- get the (work)flow **(Exercise 2)**
  - create commits
  - pull and push your commits
- collaborate via GitHub **(Exercise 3)**
  - invite collaborators
  - pull and push edits
  - manage your work: issues and milestones
  
  hands-on
========================================================

- share and publish your code **(Exercise 4)**
  - add a license
  - create a release
  - add documentation


1 | get yourself a clone
========================================================
type: sub-section

1. create a new repository on Github or fork an existing one.
2. clone it to local Computer using RStudio "New Project"
3. browse content and compare to what you see on Github

2 | get the (work)flow 
========================================================
type: sub-section

1. edit files or create new ones
2. create a commit that includes your changes
  
repeat a few times

2 | get the (work)flow 
========================================================
type: sub-section

3. check history (a.k.a. *git log*)
3. push to Github
4. browse files online
5. edit file online (e.g. your README)
6. pull
7. browse files offline


3 | collaborate via GitHub
========================================================
type: sub-section

1. create a new repository on GitHub or fork an existing one
2. invite a collaborator/accept invitation
3. add or edit some files locally
4. pull from Github (to make sure you're up to date)
5. push to Github

both collaborators repeat 3.-5. a few times. 


3 | collaborate via GitHub
========================================================
type: sub-section

Did you encounter conflicts? How did Github solve these? How did you avoid having conflicts? 


3 | collaborate via GitHub
========================================================
type: sub-section

Manage your collaboration

1. create a new *issue* 
2. define milestones


4 | publish your code
========================================================
type: sub-section


4 | publish your code
========================================================
type: sub-section

Open source: 

- turn private repos public!
- [choose a license](http://choosealicense.com/): GPL or MIT for code, Creative Commons 4.0 for text and data
- create releases and assign a DOI (e.g. via [zenodo.org](https://zenodo.org/))

Why? 
- scientific work is public property
- speeding up science: enable re-use & inspiration
- adds credibility and originality
- reproducible science 


4 | publish your code
========================================================
type: sub-section

1. add a License to your repository
2. create a release on GitHub


What we learned today:
========================================================
incremental: true

1. version control is useful, really!
2. **git** is a simple version control system  
3. use **Github** for collaboration on code 

<br>

### we might learn later

- how to fix merge conflicts
- time travelling using `git checkout` 
- advanced workflow using *branches* 
- advanced collaboration (via pull requests)



Questions?
========================================================
type: section


a last word
========================================================
incremental: true

start using git and Github now!

- for your current analysis
- for your own code package
- for your database
- for your next manuscript in latex
- for sharing, back-up, syncing
- for project management




Resources
========================================================

Extensive resources by Atlassian Bitbucket https://www.atlassian.com/git/

Official git documentation (
http://git-scm.com/) and book (http://git-scm.com/book/)


Github has some resources on [command line basics](https://try.github.io/), including a 
[git cheat sheet](https://services.github.com/kit/downloads/github-git-cheat-sheet.pdf). 

